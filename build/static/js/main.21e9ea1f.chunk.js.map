{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","upImg","setUpImg","_useState3","_useState4","isSizePerfect","setIsSizePerfect","imgRef","useRef","_useState5","unit","width","aspect","_useState6","crop","setCrop","_useState7","_useState8","previewUrl","setPreviewUrl","onLoad","useCallback","img","current","makeClientCrop","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","height","createCropPreview","stop","_x","apply","this","arguments","_ref2","_callee2","image","fileName","canvas","scaleX","scaleY","_context2","document","createElement","naturalWidth","naturalHeight","getContext","drawImage","x","y","abrupt","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","prevArray","concat","toConsumableArray","createObjectURL","Error","_x2","_x3","_x4","react_default","className","type","accept","onChange","e","target","files","length","reader","FileReader","onload","Image","result","src","readAsDataURL","ReactCrop_min_default","onImageLoaded","c","onComplete","map","i","alt","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.21e9ea1f.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nexport default function App() {\n  const [upImg, setUpImg] = useState();\n  const [isSizePerfect, setIsSizePerfect] = useState();\n  const imgRef = useRef(null);\n  const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n  const [previewUrl, setPreviewUrl] = useState([]);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        var img = new Image;\n        img.onload = function() {\n        if(img.width == 1080 && img.height == 1080){\n          setUpImg(reader.result);\n          setIsSizePerfect(true);\n        }\n        };\n        img.src = reader.result;\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        setPreviewUrl(prevArray => [...prevArray, window.URL.createObjectURL(blob)]);\n      }, 'image/jpeg');\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n      </div>\n      {isSizePerfect ? \n          <div>\n            <ReactCrop\n              src={upImg}\n              onImageLoaded={onLoad}\n              crop={crop}\n              onChange={c => setCrop(c)}\n              onComplete={makeClientCrop}\n            />\n            {previewUrl && previewUrl.map( i => <img alt=\"Crop preview\" src={i}/>)}\n          </div>\n      :\n        <h1>Please upload file with 1080 x 1080 resolution.</h1>\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}